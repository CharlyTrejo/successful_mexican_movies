# -*- coding: utf-8 -*-
"""data_api_tmdb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1auk20EVfb6x1u_WiNRNKL-b2FObqd7MT
"""

import pandas as pd
import requests

API_KEY = 'xxxxxxxxx'

def obtener_peliculas_mexicanas(api_key, paginas=2):
    base_url = "https://api.themoviedb.org/3/discover/movie"
    peliculas = []

    for pagina in range(1, paginas + 1):
        params = {
            "api_key": api_key,
            "with_origin_country": "MX",
            "sort_by": "popularity.desc",
            "page": pagina
        }

        response = requests.get(base_url, params=params)

        if response.status_code == 200:
            data = response.json()
            peliculas.extend(data.get("results", []))
        else:
            print(f"Error en la página {pagina}: {response.status_code}")
            break

    return peliculas

# Función para obtener detalles adicionales de una película
def obtener_detalles_pelicula(movie_id, api_key):
    base_url = f"https://api.themoviedb.org/3/movie/{movie_id}"
    credits_url = f"{base_url}/credits"
    params = {"api_key": api_key}

    detalles = {}
    # Obtener duración
    response_detalle = requests.get(base_url, params=params)
    if response_detalle.status_code == 200:
        data_detalle = response_detalle.json()
        detalles["runtime"] = data_detalle.get("runtime")
        detalles["budget"] = data_detalle.get("budget")
        detalles["revenue"] = data_detalle.get("revenue")
    else:
        detalles["runtime"] = None
        detalles["budget"] = None
        detalles["revenue"] = None

    # Obtener créditos
    response_creditos = requests.get(credits_url, params=params)
    if response_creditos.status_code == 200:
        data_creditos = response_creditos.json()

        # Director
        crew = data_creditos.get("crew", [])
        director = next((p["name"] for p in crew if p["job"] == "Director"), None)
        detalles["director"] = director

        # Actores principales
        cast = data_creditos.get("cast", [])
        top_cast = [actor["name"] for actor in cast[:3]]
        detalles["cast_1"] = top_cast[0] if len(top_cast) > 0 else None
        detalles["cast_2"] = top_cast[1] if len(top_cast) > 1 else None
        detalles["cast_3"] = top_cast[2] if len(top_cast) > 2 else None
    else:
        detalles["director"] = None
        detalles["cast_1"] = None
        detalles["cast_2"] = None
        detalles["cast_3"] = None

    return detalles

peliculas_mx = obtener_peliculas_mexicanas(API_KEY, paginas=100) #ajustar cantidad de páginas a revisar.
df_peliculas_mx = pd.DataFrame(peliculas_mx)
df_peliculas_mx

peliculas_con_detalles = []
for i, row in df_peliculas_mx.iterrows():
    detalles = obtener_detalles_pelicula(row["id"], API_KEY)
    pelicula_con_detalles = row.to_dict()
    pelicula_con_detalles.update(detalles)
    peliculas_con_detalles.append(pelicula_con_detalles)
df_peliculas_detalles = pd.DataFrame(peliculas_con_detalles)
df_peliculas_detalles.head()

url = f'https://api.themoviedb.org/3/genre/movie/list?api_key={API_KEY}&language=en-US'
response = requests.get(url)
genres = response.json()['genres']

genre_id_to_name = {genre['id']: genre['name'] for genre in genres}

genre_id_to_name

def map_genre_ids_to_names(genre_list):
    return [genre_id_to_name.get(genre_id, f'Unknown_{genre_id}') for genre_id in genre_list]

# Aplica la transformación
df_peliculas_detalles['genre_names'] = df_peliculas_detalles['genre_ids'].apply(map_genre_ids_to_names)

df_peliculas_detalles.head()

df_peliculas_detalles.to_csv("mexican_movies.csv")